;---------------------
; Data segment (SRAM)
;---------------------
.dseg
.org SRAM_START
TIME:   .byte 4          ; TIME[0] = sek, TIME[1] = 10sek, TIME[2] = min, TIME[3] = 10min
POS:    .byte 1          ; MUX position (0–3)

;---------------------
; Code segment (FLASH)
;---------------------
.cseg
.org 0x0000
    jmp MAIN
.org 0x0002
    jmp EXT_INT0     ; INT0 = 1Hz -> BCD
.org 0x0004
    jmp EXT_INT1     ; INT1 = 100Hz -> MUX

;---------------------
; Main program
;---------------------
MAIN:
    ; Init stack
    ldi r16, HIGH(RAMEND)
    out SPH, r16
    ldi r16, LOW(RAMEND)
    out SPL, r16

    ; Init interrupt flanks: INT0 och INT1 på fallande flank
    ldi r16, (1<<ISC01)|(0<<ISC00)|(1<<ISC11)|(0<<ISC10)
    out MCUCR, r16

    ; Enable interrupts INT0 and INT1
    ldi r16, (1<<INT0)|(1<<INT1)
    out GICR, r16

    sei ; Enable global interrupts

MAIN_LOOP:
    rjmp MAIN_LOOP

;---------------------
; EXT_INT0 – 1Hz: Tidsräkning
;---------------------
EXT_INT0:
    push r16
    push r17
    push r18

    ldi ZH, HIGH(TIME)
    ldi ZL, LOW(TIME)
    ldi r17, 9      ; Gräns för BCD
    ldi r18, 0      ; Räknare

BCD_LOOP:
    ld r16, Z
    inc r16
    cpi r16, 10
    brlt BCD_STORE
    ; overflow: sätt 0, gå vidare
    ldi r16, 0
    st Z, r16
    inc r18
    cpi r18, 4
    brlt BCD_NEXT
    rjmp BCD_DONE

BCD_NEXT:
    adiw ZL, 1
    rjmp BCD_LOOP

BCD_STORE:
    st Z, r16

BCD_DONE:
    pop r18
    pop r17
    pop r16
    reti

;---------------------
; EXT_INT1 – 100Hz: Multiplexa display
;---------------------
EXT_INT1:
    push r16
    push r17
    push r18

    ; Läs POS (0..3)
    lds r16, POS
    andi r16, 0x03
    sts POS, r16

    ; Pekare till TIME + POS
    ldi ZH, HIGH(TIME)
    ldi ZL, LOW(TIME)
    add ZL, r16
    adc ZH, __zero_reg__
    ld r17, Z        ; hämta BCD-siffra

    ; Pekare till SEGTAB + BCD
    ldi XH, HIGH(SEGTAB)
    ldi XL, LOW(SEGTAB)
    add XL, r17
    adc XH, __zero_reg__
    ld r18, X        ; segmentkod

    ; Ut till segmentport (t.ex. PORTA)
    out PORTA, r18

    ; Ut till displayval (t.ex. PORTB bit 0-1)
    out PORTB, r16

    ; Nästa position
    inc r16
    sts POS, r16

    pop r18
    pop r17
    pop r16
    reti

;---------------------
; Segmenttabell (Flash)
;---------------------
SEGTAB:
    .db 0x3F, 0x06, 0x5B, 0x4F, 0x66
    .db 0x6D, 0x7D, 0x07, 0x7F, 0x6F
    ; 0–9

;---------------------
; Slut
;---------------------

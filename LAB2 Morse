; ============================================
; Morsesändare för “DATORTEKNIK” på ATmega16A
; ============================================

    ; --- Registeralias högst upp ---
    .def ZERO        = r1      ; alltid 0 (CLR i HW_INIT)
    .def res         = r16     ; GET_CHAR‑resultat & LOOKUP‑output
    .def letter_num  = r17     ; index i MESSAGE
    .def tmp         = r19     ; temporärt i SEND & BEEP/NOBEEP
    .def beat        = r20     ; temporärt i ton‑loop

    ; --- Globala konstanter ---
    .equ N = 300              ; hastighet (antal enheter per “dit”)
    .equ T = 250              ; tonhöjd (antal DELAY‑iterationer per hög/låg)

; --------------------------------------------
; Start: initiera stack, hårdvara och kör MORSE
; --------------------------------------------
    ldi   r16, HIGH(RAMEND)
    out   SPH, r16
    ldi   r16, LOW (RAMEND)
    out   SPL, r16

    call  HW_INIT
    call  MORSE
DONE: ; evig loop när MORSE är klar
    rjump DONE

; --------------------------------------------
; HW_INIT: nollställ ZERO, initiera I/O & variabler
; --------------------------------------------
HW_INIT:
    clr   ZERO               ; r1 = 0
    sbi   DDRB, 4            ; PB4 som output (högtalare)
    ldi   letter_num, 0      ; börja på första tecknet i MESSAGE
    ret

; --------------------------------------------
; GET_CHAR: läs nästa byte ur FLASH-strängen MESSAGE
; --------------------------------------------
GET_CHAR:
    ldi   ZH, HIGH (MESSAGE*2)
    ldi   ZL, LOW  (MESSAGE*2)
    add   ZL, letter_num     ; förskjut med antal tidigare tecken
    inc   letter_num
    lpm   res, Z             ; läs in i res
    ret

; --------------------------------------------
; DELAY: enkel dubbel-loop för tidsfördröjning
; --------------------------------------------
DELAY:
    sbi   PORTB, 7           ; oscilloskop-trigger (kan tas bort)
    mov   r16, r18           ; r18 = antal “T”-iterationer
delayYttreLoop:
    ldi   r17, 0x1F
delayInreLoop:
    dec   r17
    brne  delayInreLoop
    dec   r16
    brne  delayYttreLoop
    cbi   PORTB, 7
    ret

; --------------------------------------------
; LOOKUP: ASCII ’A’–’Z’ → BTAB-index
; --------------------------------------------
LOOKUP:
    cpi   res, 'A'
    brlo  unknown_char
    cpi   res, 'Z'+1
    brsh  unknown_char

    subi  res, 'A'               ; index 0..25
    ldi   ZL, LOW  (BTAB*2)      ; *2 → byte‑adress i FLASH
    ldi   ZH, HIGH (BTAB*2)
    add   ZL, res                ; Z = BTAB*2 + index
    adc   ZH, ZERO               ; ZERO = 0
    lpm   res, Z                 ; res = morsekod
    ret

unknown_char:
    ldi   res, 0                 ; okänt tecken → inget
    ret

; --------------------------------------------
; SEND: skifta ut morsekod, kalla BEEP/NOBEEP
; --------------------------------------------
SEND:
    mov   tmp, res               ; tmp = morsekod

send_loop:
    lsl   tmp                    ; MSB → C‑flagga
    brcc  send_short             ; om 0 → kort pip

    ; —— Dah (3N) ——
    ldi   r18, 3
    call  BEEP
    rjmp  send_after

send_short:
    ; —— Dit (1N) ——
    ldi   r18, 1
    call  BEEP

send_after:
    ; mellan bitar = 1N tystnad
    ldi   r18, 1
    call  NOBEEP

    tst   tmp                    ; fler bitar kvar?
    brne  send_loop
    ret

; --------------------------------------------
; BEEP: generera pip under r18 × N (kort/lång)
; --------------------------------------------
BEEP:
    push  r18
    push  tmp
    push  beat

    mov   tmp, r18               ; tmp = antal N‑enheter

beep_loop:
    ldi   beat, T                ; tonfrekvens‑loop
beep_tone_loop:
    sbi   PORTB, 4
    rcall DELAY
    cbi   PORTB, 4
    rcall DELAY
    dec   beat
    brne  beep_tone_loop

    dec   tmp
    brne  beep_loop

    pop   beat
    pop   tmp
    pop   r18
    ret

; --------------------------------------------
; NOBEEP: motsvarande tystnad under r18 × N
; --------------------------------------------
NOBEEP:
    push  r18
    push  tmp
    push  beat

    mov   tmp, r18               ; tmp = antal N‑enheter

silent_loop:
    ldi   beat, T
silent_tone_loop:
    rcall DELAY
    rcall DELAY
    dec   beat
    brne  silent_tone_loop

    dec   tmp
    brne  silent_loop

    pop   beat
    pop   tmp
    pop   r18
    ret

; --------------------------------------------
; Data: morse‑koder för A..Z
; --------------------------------------------
BTAB:
    .db $60,$88,$A8,$90,$40,$28,$D0,$08,$20,$78
    .db $B0,$48,$E0,$A0,$F0,$68,$D8,$50,$10,$C0
    .db $30,$18,$B8,$C8

; --------------------------------------------
; Text att sända i morse — avslutas med 0
; --------------------------------------------
MESSAGE:
    .db "DATORTEKNIK",0

; --------------------------------------------
; MORSE: huvudloopen
; --------------------------------------------
MORSE:
    call  GET_CHAR

.loop:
    cpi   res, 0
    breq  .end

    cpi   res, ' '
    brne  .letter

    ; mellanslag → 7N tystnad
    ldi   r18, 7
    call  NOBEEP
    call  GET_CHAR
    rjmp  .loop

.letter:
    call  LOOKUP
    call  SEND

    ; mellan bokstäver → 2N tystnad
    ldi   r18, 2
    call  NOBEEP

    call  GET_CHAR
    rjmp  .loop

.end:
    ret

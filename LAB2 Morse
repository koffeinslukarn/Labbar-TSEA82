; ============================================
; Morsesändare för “DATORTEKNIK” på ATmega16A
; ============================================

    ; --- Registeralias högst upp ---
    .def ZERO        = r1      ; alltid noll (CLR i HW_INIT)
    .def RES         = r16     ; resultat från GET_CHAR/LOOKUP
    .def LETTER_NUM  = r17     ; index i strängen MESSAGE
    .def TMP         = r19     ; temporärt i SEND & BEEP/NOBEEP
    .def BEAT        = r20     ; temporärt i BEEP/NOBEEP

    ; --- Globala konstanter ---
    .equ N = 300               ; hastighet (antal enheter per “dit”)
    .equ T = 250               ; tonhöjd (antal DELAY‑iterationer per hög/låg)

; --------------------------------------------
; Start: initiera stack, hårdvara och kör MORSE
; --------------------------------------------
    ldi   r16, HIGH(RAMEND)
    out   SPH, r16
    ldi   r16, LOW (RAMEND)
    out   SPL, r16

    call  HW_INIT
    call  MORSE

HANG:                       ; evig loop efter MORSE
    rjmp  HANG

; --------------------------------------------
; HW_INIT: nollställ ZERO, initiera I/O & variabler
; --------------------------------------------
HW_INIT:
    clr   ZERO               ; r1 = 0
    sbi   DDRB, 4            ; PB4 som output (högtalare)
    ldi   LETTER_NUM, 0      ; börja på första tecknet i MESSAGE
    ret

; --------------------------------------------
; GET_CHAR: läs nästa byte ur FLASH-strängen MESSAGE
; --------------------------------------------
GET_CHAR:
    ldi   ZH, HIGH (MESSAGE*2)
    ldi   ZL, LOW  (MESSAGE*2)
    add   ZL, LETTER_NUM     ; byte‑offset = 2*word‑addr + index
    adc   ZH, ZERO           ; justera high‑byte om carry
    inc   LETTER_NUM
    lpm   RES, Z             ; läs ASCII in i RES
    ret

; --------------------------------------------
; LOOKUP: konvertera ASCII ’A’–’Z’ → morsekod via BTAB
; --------------------------------------------
LOOKUP:
    cpi   RES, 'A'
    brlo  UC
    cpi   RES, 'Z'+1
    brsh  UC

    subi  RES, 'A'               ; index 0..25
    ldi   ZL, LOW  (BTAB*2)      ; *2 → byte‑adress i FLASH
    ldi   ZH, HIGH (BTAB*2)
    add   ZL, RES                ; Z = BTAB*2 + index
    adc   ZH, ZERO               ; ZERO = 0
    lpm   RES, Z                 ; RES = morsekod
    ret

UC:                             ; okänt tecken → inget
    ldi   RES, 0
    ret

; --------------------------------------------
; SEND: skifta ut morsekod, anropa BEEP/NOBEEP
; --------------------------------------------
SEND:
    mov   TMP, RES               ; TMP = morsekod

SEND_LOOP:
    lsl   TMP                    ; MSB → Carry
    brcc  SHORT                  ; om Carry=0 → kort pip

    ; —— Dah (3N) ——
    ldi   r18, 3
    call  BEEP
    rjmp  AFTER

SHORT:
    ; —— Dit (1N) ——
    ldi   r18, 1
    call  BEEP

AFTER:
    ; mellan bitar = 1N tystnad
    ldi   r18, 1
    call  NOBEEP

    tst   TMP                    ; fler bitar?
    brne  SEND_LOOP
    ret

; --------------------------------------------
; BEEP: generera pip under r18 × N (kort/lång)
; --------------------------------------------
BEEP:
    push  r18
    push  TMP
    push  BEAT

    mov   TMP, r18               ; TMP = antal N‑enheter

BEEP_LOOP:
    ldi   BEAT, T                ; BEAT = ton‑frekvens‑loop
TONE_LOOP:
    sbi   PORTB, 4
    rcall DELAY
    cbi   PORTB, 4
    rcall DELAY
    dec   BEAT
    brne  TONE_LOOP

    dec   TMP
    brne  BEEP_LOOP

    pop   BEAT
    pop   TMP
    pop   r18
    ret

; --------------------------------------------
; NOBEEP: motsvarande tystnad under r18 × N
; --------------------------------------------
NOBEEP:
    push  r18
    push  TMP
    push  BEAT

    mov   TMP, r18               ; TMP = antal N‑enheter

SILENT_LOOP:
    ldi   BEAT, T
SILENT_TONE_LOOP:
    rcall DELAY
    rcall DELAY
    dec   BEAT
    brne  SILENT_TONE_LOOP

    dec   TMP
    brne  SILENT_LOOP

    pop   BEAT
    pop   TMP
    pop   r18
    ret

; --------------------------------------------
; DELAY: enkel dubbel-loop för tidsfördröjning
; --------------------------------------------
DELAY:
    sbi   PORTB, 7               ; oscilloskop‑trigger (valfritt)
    mov   r16, r18               ; r18 = antal iterationer
DL_OUTER:
    ldi   r17, 0x1F
DL_INNER:
    dec   r17
    brne  DL_INNER
    dec   r16
    brne  DL_OUTER
    cbi   PORTB, 7
    ret

; --------------------------------------------
; Data: morsekoder för A..Z (BTAB)
; --------------------------------------------
BTAB:
    .db $60,$88,$A8,$90,$40,$28,$D0,$08,$20,$78
    .db $B0,$48,$E0,$A0,$F0,$68,$D8,$50,$10,$C0
    .db $30,$18,$B8,$C8

; --------------------------------------------
; Text att sända i morse — avslutas med 0
; --------------------------------------------
MESSAGE:
    .db "DATORTEKNIK",0

; --------------------------------------------
; MORSE: huvudrutinen
; --------------------------------------------
MORSE:
    call  GET_CHAR

MAIN_LOOP:
    cpi   RES, 0
    breq  MORSE_END

    cpi   RES, ' '
    breq  SPACE

    ; bokstav → översätt & skicka
    call  LOOKUP
    call  SEND
    ldi   r18, 2              ; 2N tystnad mellan bokstäver
    call  NOBEEP
    rjmp  MAIN_LOOP

SPACE:
    ldi   r18, 7              ; 7N tystnad mellan ord
    call  NOBEEP
    call  GET_CHAR
    rjmp  MAIN_LOOP

MORSE_END:
    ret

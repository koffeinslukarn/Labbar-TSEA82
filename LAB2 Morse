.equ T = 80	; Tone frequency constant
.equ N = 150	; Morse Delay constant (frequency we send characters at)

STR: 
	.db "DATORTEKNIK", 0

;TODO space ger E
;TODO H ger S

; BTAB – Morse binärkod för A–Z (0x41–0x5A)
; Index = ASCII - 0x41
.equ BTAB_INVALID = 27

BTAB:
	.db 0x60,0x88, 0xA8, 0x90, 0x40, 0x28, 0xD0, 0x08, 0x20, 0x78, 0xB0, 0x48, 0xE0, 0xA0, 0xF0, 0x68, 0xD8, 0x50, 0x10, 0xC0,  0x30,  0x18, 0x70, 0x98, 0xB8, 0xC8

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;		START OF LOGIC	;;;
;;;		PROPERTY OF		;;;
;;;		BIG BIRGER		;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Initialize hardware
HW_INIT:
	; PIN A - Ingång
	sbi DDRB, 7      ; sätter pin 7B som utgång

; Huvudloop som sänder en hel sträng
MORSE:
	; pushar alla register vi använder till stacken (inklusive Z etc)
	; De måste enl instruktionerna vara opåverkade (höhö som jag ;) )
	; efter vi kört programmet	
	push r16
	push r30
	push r31

	ldi r30, low(STR << 1)	; Ladda ZL-pekare (för strängen)
	ldi r31, high(STR << 1)	; Ladda ZH-pekare
	
	call GET_CHAR		; Get first character in string
	call BEEP_CHARS

	pop r31
	pop r30
	pop r16

	rjmp MORSE			; Loop again

; Logic for sending one character
; Call 'GET_CHAR' first
BEEP_CHARS:
	; We have ASCII-character in r16
	call LOOKUP			; Convert character to morse representation
	; Binary Morse-representation will now be in r16

	call SEND_CHAR
	call NOBEEP			; Silence over 2N
	call NOBEEP

	CALL GET_CHAR		; Get next character in string
	cpi r16, 0			; Loop until no more chars (r16 == 0)
	brne BEEP_CHARS

; Get next ASCII-character from string
; Next character byte is saved to r16
GET_CHAR:
	lpm r16, Z+			; Read character byte from Z-pointer, then increment pointer
	ret

; Translates ASCII-character to binary
; Character in r16
; Output morse representation in r16
LOOKUP:
	push r1
	push r30			; Store Z-pointer on stack
	push r31
	
	; Subtrahera ASCII-kod för första bokstaven 'A' ($41)
	subi r16, 'A'		; r16 = index i BTAB

	;Branch to INVALID if r16 is < 0 (maybe space character?)
	cpi r16, 0
	brlt LOOKUP_INVALID
	;Branch to INVALID if r16 is >= 27 (invalid character)
	cpi r16, BTAB_INVALID
	brsh LOOKUP_INVALID

	; Ladda addressen till BTAB i Z-pointer
	ldi r30, low(BTAB << 1)
	ldi r31, high(BTAB << 1)

    ; Varje steg i BTAB är egentligen 2 steg, därav multiplicera offset med 2
    lsl  r16            ; r16 = r16 * 2

	; Add r16 offset to Z-pointer
	clr r1
	add r30, r16
	add r31, r1

	; Read Morse representation from BTAB
	lpm r16, Z

LOOKUP_DONE:	
	pop r31
	pop r30 
	pop r1
	ret

LOOKUP_INVALID:
	ldi r16, $FF
	rjmp LOOKUP_DONE
	
; Sends a character
; Character Morse representation in r16
SEND_CHAR:
	call SEND_BITS_LOOP

	call NOBEEP			; 1N Silence, space between next character
	ret
	
SEND_BITS_LOOP:
	call NOBEEP

	; Check if r16 is INVALID ($FF), then play space bit
	cpi r16, $FF
	breq SEND_SPACE_BIT

	lsl r16		 			; Bitshift character left
	; Bit to send is now found in carry flag
	call SEND_BIT
	
	cpi r16, $80				; Keep looping until r16 == 10000000 == $80
	brne SEND_BITS_LOOP			; as it marks end bit
	
	ret

SEND_SPACE_BIT:
	; Play silence for 7N
	call NOBEEP3
	call NOBEEP3
	call NOBEEP
	ret

; Uses carry flag 
SEND_BIT:
	brcc BEEP			; Branch to beep if carry is not set
	brcs BEEP3			; Branch to long beep if carry is set
	ret

BEEP:
	push r18
	ldi r18, N    ;oopar N gånger
BEEPLOOP:
	;Vi växlar mellan 1 och 0 med en frekvens på 500 hz
	cbi PORTB, 7; sätt utgången till 1
	call DELAY
	sbi PORTB, 7; sättutgången till 0
	call DELAY
	dec r18 ; minskar loopen med et

	cpi r18,$00		; Sluta loopa då r18 == $00
	brne BEEPLOOP	; om
	pop r18
	ret

BEEP3:
	call BEEP
	call BEEP
	call BEEP
	ret

NOBEEP:
	push r18
	ldi r18, N  ; Vi loopar N gånger
NOBEEPLOOP:
	cbi PORTB, 7; sättutgången till 0
	call DELAY
	call DELAY
	
	dec r18 ; minskar loopen med et

	cpi r18,$00		; Sluta loopa då r18 == $00
	brne NOBEEPLOOP
	pop r18
	ret

NOBEEP3:
	call NOBEEP
	call NOBEEP
	call NOBEEP
	ret

; Rutinen DELAY är en vänteloop som samtidigt
; avger en skvallersignal på PB7.
; PB7 är hög (jag med) när rutinen körs
;
; Med angivet värde i r16 väntar rutinen
; ungefär en millisekund @ 1 MHz
;
; PORTB måste konfigureras separat.
DELAY:
	push	r19
	push	r17
	ldi		r19,10		; Decimal bas
delayYttreLoop:
	ldi		r17,$1F
delayInreLoop:
	dec		r17
	brne	delayInreLoop
	dec		r19
	brne	delayYttreLoop
	pop		r17
	pop		r19
	ret
